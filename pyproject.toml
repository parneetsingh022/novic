[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "novic"
version = "0.1.0.dev1"
description = "Novic - a lightweight and beginner-friendly code editor built with PySide6."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
authors = [
  { name = "Parneet Sidhu"}
]
dependencies = [
  "PySide6>=6.6"
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
]

[project.scripts]
novic = "novic.main:main"


[tool.bumpversion]
current_version = "0.1.0.dev1"
commit = true
tag = false
tag_name = "v{new_version}"

# Parse MAJOR.MINOR.PATCH with optional pre-release (a/b/rc) and optional .devN
# Matches: 1.2.3 | 1.2.3.dev1 | 1.2.3a1 | 1.2.3a1.dev2 | 1.2.3b2 | 1.2.3rc3
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(?:(?P<prelabel>a|b|rc)(?P<pre>\d+))?(?:\.dev(?P<dev>\d+))?'

# How to write it back (most specific first)
serialize = [
  "{major}.{minor}.{patch}{prelabel}{pre}.dev{dev}",  # e.g., 0.1.0a1.dev2
  "{major}.{minor}.{patch}{prelabel}{pre}",           # e.g., 0.1.0b3
  "{major}.{minor}.{patch}.dev{dev}",                 # e.g., 0.1.0.dev5
  "{major}.{minor}.{patch}",                          # e.g., 0.1.0
]

[tool.bumpversion.parts]
major = {}
minor = {}
patch = {}

# Pre-release label: one of a, b, rc (alpha/beta/release-candidate)
[tool.bumpversion.parts.prelabel]
optional = true
values = ["a", "b", "rc"]

# The numeric part after the label (a1/b2/rc3)
[tool.bumpversion.parts.pre]
optional = true

# Development release number (".devN")
[tool.bumpversion.parts.dev]
optional = true

# Tell bump-my-version that all these files can be changed for any part bump
[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
include_bumps = ["major", "minor", "patch", "prelabel", "pre", "dev"]

[[tool.bumpversion.files]]
filename = "src/novic/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
include_bumps = ["major", "minor", "patch", "prelabel", "pre", "dev"]

